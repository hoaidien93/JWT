#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('restfulapi:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
let clientsWaiting = undefined;
let mapPlaying = [];
var io = require('socket.io')(server);
io.on('connection', function (socket) {
  socket.on('register', (data) => {
    if (!clientsWaiting) {
      clientsWaiting = {
        username: data.username,
        socketId: data.socketId
      };
    } else {
      let objMatch = {
        player1_username: clientsWaiting.username,
        player1_id: clientsWaiting.socketId,
        player2_username: data.username,
        player2_id: data.socketId,
      };
      mapPlaying.push(objMatch);
      // Emit found

      io.sockets.in(clientsWaiting.socketId).emit("Founded", objMatch);
      io.sockets.in(data.socketId).emit("Founded", objMatch);

      console.log(mapPlaying);
      clientsWaiting = undefined;
    }
  })

  socket.on("sendMessage", (data) => {
    console.log(data);
    io.sockets.in(data.to).emit("newMessage", { message: data.message });
  });

  socket.on("sendClick", (data) => {
    console.log(data);
    io.sockets.in(data.to).emit("newClick", {
      position: {
        row: data.position.row,
        column: data.position.column
      }
    });
  })

  socket.on('disconnect', function () {
    if (!clientsWaiting) {
      if (clientsWaiting.socketId === socket.conn.id) {
        clientsWaiting = undefined;
      }
    }
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
